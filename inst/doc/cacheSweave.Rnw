\documentclass{article}


%%\VignetteIndexEntry{The cacheSweave Package}
%%\VignetteDepends{cacheSweave}

\usepackage{amsmath}
\usepackage{hyperref}
\usepackage{natbib}
\usepackage[margin=1.25in]{geometry}
\usepackage{charter}
\newcommand{\proglang}{\textsf}
\newcommand{\code}{\texttt}
\newcommand{\pkg}{\textbf}
\renewcommand{\baselinestretch}{1.1}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% almost as usual
\author{Roger D. Peng\\Department of Biostatistics\\Johns Hopkins Bloomberg School of Public Health\\and\\Tobias Abenius\\Department of Mathematical Statistics\\University of Gothenburg}

\title{The \pkg{cacheSweave} Package}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{document}

%% include your article here, just as usual
%% Note that you should use the \pkg{}, \proglang{} and \code{} commands.

\maketitle

\section{Introduction}

The Sweave system of~\cite{leis:2002} is a literate programming tool
based on ideas of~\cite{knut:1984} and is currently part of the core
\proglang{R} installation.  Specifically, Sweave is a system for
processing documents that mix \LaTeX\ document formatting with
\proglang{R} code.  \proglang{R} code can be interspersed within the
\LaTeX\ markup by indicating ``code chunks''.  These code chunks are
evaluated by the \code{Sweave} function in \proglang{R} and the code
is replaced with the results of the evaluation.  For example, the code
for fitting a linear model and summarizing the estimated regression
coefficients might be replaced by a formatted table of estimated
regression coefficients along with standard errors and $p$-values.
Another possibility is for the code to replaced by a plot which shows
the data and the fitted regression line.  In either case, the author
writes the code to generate the output and Sweave runs the code and
places the output in the final document.

Given a file written in the Noweb format~\citep{rams:1994}, one can
generate a \LaTeX\ file by running in \proglang{R}
<<runSweave,eval=false>>=
Sweave("foo.Rnw")
@
where ``foo.Rnw'' contains both \LaTeX\ markup and \proglang{R} code.
Calling \code{Sweave} in this manner results in a the file ``foo.tex''
being created, which can subsequently be processed by standard
\LaTeX\ tools.  In particular, the \pkg{tools} package contains the
\proglang{R} function \code{texi2dvi} which calls the system's
\code{texi2dvi} program if it is available.

Sweave has many potential uses, but it is particularly useful for
creating statistical documents that are \textit{reproducible}, where
the results of computation can be reproduced by executing the original
code using the original data.  Since the code used for analysis is
embedded directly into the relevant document, there is a tighter
correspondence between the descriptive text and the computational
results and a decreased potential for mismatches between the two.  In
addition, Sweave's ability to recompute results to reflect changes or
updates to the datasets and analytic code is a great benefit to
authors who must maintain statistical documents.  With Sweave, all of
the relevant text and code reside in a master document from which
different outputs can be derived by either ``weaving'' to create a
human-readable document or ``tangling'' to produce a machine-readable
code file.

One aspect of Sweave's default mode of operation is that all code
chunks are evaluated whenever the document is read/processed by the
\code{Sweave} function in \proglang{R} (except when an authors
explicitly indicates that a code chunk should not be evaluated).
While this is generally considered a feature, it can be cumbersome
during the development of a document if the code chunks contain
calculations that are lengthy or resource intensive.  In particular,
changes to text portions of the document require that the entire
document be re-Sweaved so that the resulting \LaTeX\ file can reflect
the changes to the text.  In such cases, it might be desirable for the
code chunks to either not be evaluated or to be cached in some manner
so that subsequent evaluations take less time.

One approximate solution to the problem described above is to indicate
that code chunks should not be evaluated (i.e. by setting
\code{eval=false} as an option for each code chunk) so that the
\code{Sweave} function will skip over them and create the
\LaTeX\ file.  However, such an approach is probably not desirable
since then no results can be displayed in the document.  Another
approach is to separate out the code chunks that contain lengthy
computations into a separate file and then include the resulting file
via \LaTeX's \verb+\input+ directive.  This way, the file with the
expensive code chunks can be Sweaved once while the text can be
modified independently in a separate file.  This approach has merit
and can also benefit greatly from the use of the \code{make} utility,
but it also breaks the principle of including all of the text and code
in a single file.  The need to manage multiple files has the potential
to lead to the same problems that Sweave and other literate
programming tools were (in part) designed to solve.

Consider the following code chunk.
<<sleepExample,eval=false>>=
set.seed(1)
x <- local({
    Sys.sleep(10)
    rnorm(100)
})
results <- mean(x)
@

Admittedly, this code chunk is not very interesting or realistic but
it is useful for demonstrating the basic approach of the
\pkg{cacheSweave} package.  In the code chunk, we (1) set the random
number generator seed; (2) generate 100 standard Normal random numbers
after sleeping for 10 seconds; and (3) calculate the mean of the
Normal random numbers.  After executing the code chunk, there are two
objects in the user's workspace (i.e. the global environment):
\code{x} and \code{results} (there is also a hidden object
\code{.Random.seed} that is created by \code{set.seed}).

On a modern computer executing the code chunk above should take about
10 seconds since the operations other than the call to
\code{Sys.sleep} use a negligible amount of wall clock time.  Although
the use of \code{Sys.sleep} here is artificial, one can imagine
replacing it with a call to a function that executes a complex or
resource intensive statistical calculation.  For the purposes of the
task at hand, we may only be interested in the mean of the vector
\code{x}, but we have to spend a reasonable amount of time getting
there.  Repeated evaluation of this code chunk may be neededlessly
time consuming if the code and data do not change after the first
evaluation.

The \pkg{cacheSweave} package allows users to cache the results of
evaluating a Sweave code chunk.  In the above example, the basic
approach would be to cache the objects \code{x} and \code{results} in
a key-value database with the key being the object name and the value
being the \proglang{R} object itself.  On future evaluations of this
code chunk (assuming the code has not changed otherwise), we could
load \code{x} from the database rather than wait the 10 seconds as we
did on the first evaluation.  Using the cached value of \code{x} we
could compute various summary statistics.  If we were interested in
the mean of \code{x} we could simply load the cached value of
\code{results} from the database (although in this case direct
recalculation of the mean would not take much time).


\section{Expression caching mechanism}

A simple code chunk in a Sweave document might appear as follows.
\begin{verbatim}
%<<FitLinearModel>>=
library(datasets)
library(stats)
data(airquality)
fit <- lm(Ozone ~ Temp + Solar.R + Wind, data = airquality)
%@
\end{verbatim}
This code chunk loads the \code{airquality} dataset from the
\pkg{datasets} package and fits a linear model using the \code{lm}
function from the \pkg{stats} package.  In this case, two objects are
created in the workspace: the \code{airquality} data frame and the
\code{fit} object containing the output from the \code{lm} call.

To make use of the caching mechanism provided in \pkg{cacheSweave},
the user must set the option \code{cache=true} in the code chunk
declaration.  The modified code chunk would be
\begin{verbatim}
%<<FitLinearModel,cache=true>>=
library(datasets)
library(stats)
data(airquality)
fit <- lm(Ozone ~ Temp + Solar.R + Wind, data = airquality)
%@
\end{verbatim}
The user must also modify the standard invocation of \code{Sweave} by
using the \code{cacheSweaveDriver} function instead of the default
\code{RweaveLatex} driver function.  If the above code chunk were
contained in the file ``foo.Rnw'', then one would call
<<useCacheSweave,eval=false>>=
library(cacheSweave)
Sweave("foo.Rnw", driver = cacheSweaveDriver)
@
to process the file with the caching mechanism.

On the first evaluation the \code{cacheSweaveDriver} function does a
number of computations in addition to the standard Sweave processing:
\begin{enumerate}
\item
For each code chunk, a key-value database is created, by default, in
the current working directory for storing data objects.  The database
implementation comes from the \pkg{stashR} package.  The name of the
database is derived from the name of the code chunk and an MD5
digest~\citep{md5:1992} of the entire code chunk.  Users can change
the location of the key-value database by calling the
\code{setCacheDir} function and providing a path.
\item
Within each code chunk, there may be multiple expressions and the each
expression is handled separately.  For each expression:
\begin{enumerate}
\item
The MD5 digest of the expression is taken and looked up in the
key-value database.  If the digest does not exist, then the expression
is evaluated in a temporary environment that has the global
environment as a parent.
\item
After evaluation, the names of the objects created as a result of the
evaluation are stored in the key-value database as a character vector
with the digest expression as the key.
\item
The objects created as a result of the evaluation are then stored
separately in the database using their own names as keys.
\item
The objects are then lazy-loaded~\citep[see e.g.][]{rnews:ripley:2004}
into the global environment via the \code{dbLazyLoad} function from
the \pkg{filehash} package~\citep{peng:2006}.
\end{enumerate}
%\item
%A ``map file'' is created which is a text file that contains metadata
%about the code chunks and any resulting databases or figures produced.
\end{enumerate}
The result of running \code{Sweave} with the \code{cacheSweaveDriver}
function is a \LaTeX\ file and a collection of \pkg{stashR} databases
either in the current directory or in a directory specified by
\code{setCacheDir}.%, and a map file which contains information about
%each of the code chunks.

On a subsequent evaluation, the processing is slightly different.
Namely, for each expression in a code chunk:
\begin{enumerate}
\item
The MD5 digest of the expression is taken and looked up in the
key-value database.  If the digest exists (indicating that the same
expression has been evaluated previously), the names of the objects
associated with this expression are retrieved.
\item
Given the names of the objects associated with this expression, the
objects are then lazy-loaded into the global environment via the
\code{dbLazyLoad} function.
\end{enumerate}
In this situation, the evaluation of a cached expression is replaced
by the lazy-loading of the objects associated with that expression
into the global environment.

If a future expression (either within the same code chunk or in a
subsequent code chunk) requires an object created in a previous code
chunk, then that object will be automatically loaded into the global
environment via the lazy-loading mechanism.

\section{Lazy-loading of objects}

The lazy-loading of objects into the global environment once they have
been cached is a useful feature of the \pkg{cacheSweave} package when
large objects are used in a code chunk.  For example, one code chunk
might read in a large dataset and calculate a summary statistic based
on that dataset, e.g.
\begin{verbatim}
%<<loadLargeDataset,cache=true>>=
data <- readLargeDataset("datafile")
x <- computeSummaryStatistic(data)
%@
\end{verbatim}
With caching turned on for this code chunk, the objects \code{data}
and \code{x} are stored in the cached computation database for this
code chunk.  A future code chunk then might simply print the summary
statistic \code{x}, for example,
\begin{verbatim}
%<<printX>>=
print(x)
%@
\end{verbatim}
If the primary interest is in the summary statistic \code{x}, then on
future evaluations of both of these code chunks, the object
\code{data} is never needed.  It is only needed on the first
evaluation so that the summary statistic can be calculated and stored
in the object \code{x}.  When \code{data} is lazy-loaded in future
Sweave runs, it is never accessed and hence never actually loaded from
the database.  Therefore, code can be written in the manner shown
above and there is no need to worry about the \code{data} object being
loaded repeatedly into \proglang{R} when it is not actually needed.

\section{Dependencies between code chunks}
Let say there are chunks \code{A} and \code{B} specifying some parameters that affect chunks below. 
Some chunks \code{C} are affected by the change, but there are chunks \code{D} that are not affected.
Chunks that are affected {\em depend} on the values from changed chunks \code{A} and \code{B}.
This is expressed as following:
\begin{verbatim}
%<<A,cache=true>>
lambda1 = 0.1
%@
%<<B,cache=true>>
B = 1000
%@
%<<C,cache=true,dependson=A;B>>
fit <- fitmodel(X,y,lambda,B)
%@
%<<D,cache=true>>
norm(crossprod(X,y),'i')
%@
\end{verbatim}

Each time a chunk is evaluated they are given a timestamp. 
The chunk at hand check if it depends on a set of {\em dependees}, {\em i.e.} chunks and/or files that are depended on.
If it does it check to see if the chunk at hand was stored before the dependees.
If so it is flagged as old and need to re-evaluate. 
Otherwise chunks are considered fresh and loaded.

Note that depending on a chunk that is not cached or on a file which does not yet exist is considered illegal since the dependee would not have a timestamp, execution will be stopped if such a dependency is encountered.
Also note that when expressing that a chunk depends on several other chunks those must be separated with semicolon as the normal colon is used to separate options in general.

One can see what is going on with the chunks involved if one adds the parameter \code{trace} to options when Sweaving.
<<useCacheSweaveDepends,eval=false>>=
Sweave("bar.Rnw", driver = cacheSweaveDriver, trace=TRUE)
@
This will output statements that tell creation times of the different chunks, whether it is considered fresh or dirty in relation to their dependencies. 
This could feel comforting when looking for bugs.

Given a correct dependency structure among cached chunks one can feel safe that the data presented is up to date at all times.

\section[Construction of cacheSweaveDriver]{Construction of \code{cacheSweaveDriver}}

The construction of the \code{cacheSweaveDriver} function is modeled
on the \code{RweaveLatex} function from the \pkg{utils} package.  The
\code{cacheSweaveDriver} function returns a list of five functions:
\begin{enumerate}
\item
\code{setup}, creates a list of available options.  We add an extra
option \code{cache} for indicating whether a code chunk should be
cached. We also add an extra option \code{dependson} for indicating 
whether the evaluation of the chunk at hand depends on previous results.
%We also add the name of the map file so that it can be
%updated after evaluating each code chunk.
\item
\code{runcode}, based on the \code{RweaveLatexRuncode} function in the
\pkg{utils} package, this function executes code in each code chunk
and saves objects to \pkg{stashR} databases. While much of the
original code is retained, we replace the call to
\code{RweaveEvalWithOpt} with our own \code{cacheSweaveEvalWithOpt}
function, which handles the evaluation of the expression, creation of
the \pkg{stashR} database, and the saving of objects to the database.
%We also add a call to the function \code{writeChunkMetadata} which writes
%out information to the map file.
\item
\code{writedoc}, handles writing of output \LaTeX\ file; we import the
\code{RweaveLatexWritedoc} function from \pkg{utils}.
\item
\code{finish}, closes the output connection and prints some final
messages; we import the \code{RweaveLatexFinish} function from
\pkg{utils}.
\item
\code{checkopts}, checks that code chunk options are valid; we import
the \code{RweaveLatexOptions} function from \pkg{utils}.
\end{enumerate}

The bulk of the work is done in the \code{runcode} function, which
handles the evaluation of the expressions in each code chunk.  The
code in that function is based on the code from \proglang{R} version
2.5.0~\citep{r:2007}.

%% \proglang{R} version 2.5.0 introduced the
%% \code{makeRweaveLatexCodeRunner} function in the \pkg{utils} package
%% for the purpose of allowing custom \code{Sweave} drivers.
%% Unfortunately, \pkg{cacheSweave} cannot yet take advantage of this
%% mechanism because there are certain operations that must be done at
%% the level of the code chunk while using
%% \code{makeRweaveLatexCodeRunner} only allows modifications at the
%%level of the expression.

\section{Expressions with side effects}

Simple expressions, such as assignments, will typically result in a
single object being created in the global environment.  For example,
the expression
<<simpleExpr,eval=false>>=
x <- 1:100
@
results in an object named \code{x} being created in the global
environment whose value is an integer sequence from 1 to 100.

However, there are other types of expressions which can result in
either multiple objects being created in the user's workspace or no
objects being created.  For example, the \code{source} function is
often used to load objects from an \proglang{R} code file.  Unless the
\code{local} argument is set to \code{TRUE}, these objects will by
default be created in the global environment.  When the
\code{cacheSweaveDriver} function evaluates an expression that
contains a call to \code{source}, there will be objects created
outside of the temporary environment in which the expression is
evaluated (again, unless the argument \code{local = TRUE} is specified
in the call to \code{source}).  The \code{set.seed} function behaves
in a similar way by modifying (or creating) the \code{.Random.seed}
object in the global environment.

In order to handle the effects of functions like \code{source} the
function \code{evalAndDumpToDB}, which evalutes an expression and
saves the results to the \pkg{stashR} database, first obtains a
character vector of the names of all the objects in the global
environment.  After evaluating the expression in a temporary
environment, a check is made to see if any new objects have been
created or modified in the global environment.  If so, those objects
are saved to the database as well as any objects that were created in
the temporary environment.  Note that we currently make a special case
of the global environment.  If the code being evaluated creates
objects in some other environment, then \pkg{cacheSweave} will not be
able to cache those objects.

Another example of a function with side effects is the \code{plot}
function (and related functions) from the \pkg{graphics} package.
Since \code{plot} does not create any objects in the global
environment, but rather creates a plot on a graphics device, there is
nothing for \code{cacheSweaveDriver} to cache.  Currently, it is not
clear what is the best way to handle this behavior and so calls to
plotting functions cannot be cached using the \pkg{cacheSweave}
package.  In the future, we may attempt to detect the creation of a
graphics file (e.g. a PDF or EPS file) and store that file along with
the cached computations.

There are many other types of expressions that have side effects and
do not result in the creation of objects in the global environment.
Expressions such as calls to \code{system} or functions which write
out files (e.g. \code{save}, \code{save.image}, \code{write.table},
\code{dput}, etc.) all result in objects being created outside of
\proglang{R}.  In general, these expressions cannot yet take advantage
of the caching mechanism in \pkg{cacheSweave} and must be executed
every time \code{Sweave} is run.

When caching is used, it is useful to divide the code into chunks
which setup the data and results (and can use caching) and chunks that
present or display the results (and cannot use caching).  For example,
with the linear model example from the previous section, one might
have one code chunk for loading the data and fitting the model
\begin{verbatim}
%<<FitLinearModel,cache=true>>=
library(datasets)
library(stats)
data(airquality)
fit <- lm(Ozone ~ Temp + Solar.R + Wind, data = airquality)
%@
\end{verbatim}
and another code chunk for summarizing the results in a standard table
of regression coefficients.
\begin{verbatim}
%<<LinearModelTable,results=tex>>=
library(xtable)
print(xtable(fit))
%@
\end{verbatim}
Here, we use the \pkg{xtable} package to create a formatted \LaTeX\
table of the regression output.  A similar approach could be used for
plots by separating out the code that generates the plot, e.g.
\begin{verbatim}
\begin{figure}
  \centering
%<<LinearModelDiagnosticPlot,fig=true>>=
par(mfcol = c(2, 2))
plot(fit)
%@
\caption{Linear model diagnostic plots}
\end{figure}
\end{verbatim}

\bibliography{combined}
\bibliographystyle{jss}

\end{document}
